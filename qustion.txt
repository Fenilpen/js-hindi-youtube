basic qustions and notes regarding javascript

() = parentheses
{} = curly brackets
[] = square brackets

qustion 1
what is the diffrence bitween .txt files and .js files
answer :-
the diffrence bitween .js files and .txt files is that both are allmost same, 
the reason is that we can treat both files as source files
meanwhile both contains text but in .js file the text is not random text 
they have their own sturcture,syntext and meaning 
every programing langauage come with their own syantex .js , .py etc

.js / .py extention can help to compile code with their own systex and meaning
.txt dont have any compiler and we needcompiler to execute our code
if we write var/let in txt its just a alphabetical word with no meaning
but with extention .js/.py it has it own meaning its called the keyword

Notes from the series:-

No - 4 (Variables)
prefer not to use var 
beacause of the issue in block scope and functional scope


No - 5 (dataTypes,newjs)
"use strict"  it will treat all javascript code as newer version    (newer version of javascript)


datatypes in javascript:-

there are two types of datatypes

1 Primitive dataTypes  and Non-Primitive datatypes :-

number  => 234
bigint => 2 power 4
string =>  "in this"
boolean => true , false
null
undefined
symbol => something unique

Non-Primitive datatypes (Reference)

Array
object
function
non-Primitive's Typeof is function , object

note 
1 if you want to master javascript master javascript objects and browser's web-events.
2 Javascriptis dynamicaly typed langauage. it means type of variable is determined at runtime.


No - 6 Datatype Conversion

// "33" => 33    /string to number
// "33fenil" => NaN    /string to number   (becuase its not pure number so its NaN (not a number))
// true => 1; false => 0   /number to boolean and vice versa
// "" => false   /string to boolean
// "fvds" => true  /string to boolean


No-7 Strings method


No-8 object-destructuring

here is the syntex of object de-structuring

let obj = {
    name: "fenil"
    price: "000"
    courceInstructure: "aryabhatt"
}

if i want to access value of courceInstructure i will use obj. path
because you cant log courceInstructure directly.
lets enhance this with something easy

const {courceInstructure} = course // new method
console.log(courceInstructure)

// This line is saying, "Take the courceInstructure property from 
// the course object and create a variable called courceInstructure with its value."
// Essentially, it pulls out the value of the courceInstructure property from the course object 
// and assigns it to a new constant called courceInstructure


special note on DOM :-

// here is the quick note regarding my confution on string 
// when we write 'click' it just meant c+l+i+c+k alphabets
// but if we use 'click' in events it means the meaning of click
// and both are strings so while learning this qustion often comes

// In JavaScript, strings like 'click' that you pass into functions like addEventListener are predefined strings 
// that the JavaScript engine recognizes as specific event types. Here's a clearer breakdown:

// General Strings :-
// General strings are just sequences of characters you define for various purposes, 
// such as storing text, combining values, etc.

// Event Strings :-
// Event strings like 'click', 'mouseover', 'keydown', etc., are predefined in the browser's event handling system. 
// They are recognized by the JavaScript engine as specific types of events.

// When you use 'click' in addEventListener, it isn't just any arbitrary string. Instead, 
// it's a keyword that the browser's event system understands to mean "listen for a click event."

// In this war inside string , 'click' is a predefined string that tells the browser to look for 
// and handle click events on the specified element. 
// These predefined strings are part of the event types that are built into the browser's DOM API


// How the Browser Interprets Event Strings
// The browser has a list of recognized event types. When you pass 'click' to addEventListener, 
// the browser checks this list, understands that you're referring to a click event, 
// and sets up the necessary logic to detect and handle this event.

// In summary, while both are technically strings, general strings are just sequences of characters, 
// while event strings like 'click' have special meaning within the context of the DOM and are recognized by the browser's event system.

