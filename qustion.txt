basic qustions and notes regarding javascript

() = parentheses
{} = curly brackets
[] = square brackets


how javascript runs behind :-

JavaScript works behind the scenes through several key components, including the JavaScript engine, 
memory management, and the event loop. Let’s break it down step by step.

1. JavaScript Engine (V8, SpiderMonkey, etc.)
Every browser has a JavaScript engine that converts JavaScript code into machine code. Some popular engines are:

Google Chrome & Node.js → V8
Firefox → SpiderMonkey
Safari → JavaScriptCore
The engine has two main parts:

Memory Heap – Stores variables and objects.
Call Stack – Keeps track of function calls.

When you run JavaScript, the engine first parses your code, then compiles it using Just-In-Time (JIT) compilation, 
and finally executes it.

2. Execution Context and Call Stack
JavaScript runs inside an execution context, which consists of:

Global Execution Context (GEC) – Created when the script starts.
Function Execution Contexts – Created when a function is called.
The Call Stack is a data structure where function calls are pushed and popped.

Example:
javascript

function a() {
    console.log("Hello from A");
}

function b() {
    a();
    console.log("Hello from B");
}

b();

How it runs in the call stack:
b() is called → Added to the stack.
b() calls a() → a() is added to the stack.
a() finishes → Removed from the stack.
b() finishes → Removed from the stack.

3. Memory Management (Heap & Stack)
Primitive types (numbers, strings, booleans) are stored in the stack.
Reference types (objects, arrays) are stored in the heap.

Example:

let x = 10; // Stored in the stack
let obj = { name: "Alice" }; // Stored in the heap

Garbage Collection (GC) in JavaScript automatically removes unused objects from memory.

4. Asynchronous JavaScript & Event Loop
JavaScript is single-threaded, meaning it executes one task at a time. But it handles async operations using:

Web APIs (like setTimeout, fetch, DOM events)
Callback Queue & Microtask Queue
Event Loop (which manages async execution)
Example:

console.log("Start");

setTimeout(() => {
    console.log("Timeout callback");
}, 0);

console.log("End");

Execution Flow:
"Start" is logged.
setTimeout is sent to Web API.
"End" is logged.
The event loop waits for the timer, then moves the callback to the queue.
"Timeout callback" is logged.

5. JavaScript Compilation Model (JIT Compilation)
Unlike C++ or Java, JavaScript is not purely interpreted but uses JIT (Just-In-Time) compilation:

Parsing → Code is read and converted into an Abstract Syntax Tree (AST).
Compilation → Bytecode is created by an interpreter.
Execution & Optimization → The engine optimizes frequently used code.

TL;DR: How JavaScript Works Behind the Scenes
JS Engine (V8, SpiderMonkey) parses and executes the code.
Call Stack manages function execution.
Memory Heap stores objects, while primitives use the stack.
Event Loop handles async tasks from the Web API.
JIT Compilation makes JavaScript faster.


qustion 1
what is the diffrence bitween .txt files and .js files
answer :-
the diffrence bitween .js files and .txt files is that both are allmost same, 
the reason is that we can treat both files as source files
meanwhile both contains text but in .js file the text is not random text 
they have their own sturcture,syntext and meaning 
every programing langauage come with their own syantex .js , .py etc

.js / .py extention can help to compile code with their own systex and meaning
.txt dont have any compiler and we needcompiler to execute our code
if we write var/let in txt its just a alphabetical word with no meaning
but with extention .js/.py it has it own meaning its called the keyword

qustion 2 
what is the diffrence bitween () and =

Style Property Assignment (using =):
parent.children[2].style.color = "orange": Here, you're assigning the color "orange" to the color property of the style object for a specific child element. The = sign is used to set the value of this property directly.

Query Selector Method (using () ):
const dayone = document.querySelector(".day"): This line is using the querySelector method to select the first element in the document that matches the specified CSS selector (in this case, an element with the class "day"). The parentheses () are used to pass the argument (the selector) to the method.

In essence:
= is used for assigning values.
() is used to invoke methods or functions.

Notes from the series:-

No - 4 (Variables)
prefer not to use var 
beacause of the issue in block scope and functional scope


No - 5 (dataTypes,newjs)
"use strict"  it will treat all javascript code as newer version    (newer version of javascript)


datatypes in javascript:-

there are two types of datatypes

1 Primitive dataTypes  and Non-Primitive datatypes :-

number  => 234
bigint => 2 power 4
string =>  "in this"
boolean => true , false
null
undefined
symbol => something unique

Non-Primitive datatypes (Reference)

Array
object
function
non-Primitive's Typeof is function , object

note 
1 if you want to master javascript master javascript objects and browser's web-events.
2 Javascriptis dynamicaly typed langauage. it means type of variable is determined at runtime.


No - 6 Datatype Conversion

// "33" => 33    /string to number
// "33fenil" => NaN    /string to number   (becuase its not pure number so its NaN (not a number))
// true => 1; false => 0   /number to boolean and vice versa
// "" => false   /string to boolean
// "fvds" => true  /string to boolean


No-7 Strings method


No-8 object-destructuring

here is the syntex of object de-structuring

let obj = {
    name: "fenil"
    price: "000"
    courceInstructure: "aryabhatt"
}

if i want to access value of courceInstructure i will use obj. path
because you cant log courceInstructure directly.
lets enhance this with something easy

const {courceInstructure} = course // new method
console.log(courceInstructure)

// This line is saying, "Take the courceInstructure property from 
// the course object and create a variable called courceInstructure with its value."
// Essentially, it pulls out the value of the courceInstructure property from the course object 
// and assigns it to a new constant called courceInstructure


no_09

special note on DOM and String :-

// here is the quick note regarding my old confution on string 
// when we write 'click' it just meant c+l+i+c+k alphabets
// but if we use 'click' in events it means the meaning of click
// and both are strings so while learning this qustion often comes

// In JavaScript, strings like 'click' that you pass into functions like addEventListener are predefined strings 
// that the JavaScript engine recognizes as specific event types. Here's a clearer breakdown:

// General Strings :-
// General strings are just sequences of characters you define for various purposes, 
// such as storing text, combining values, etc.

// Event Strings :-
// Event strings like 'click', 'mouseover', 'keydown', etc., are predefined in the browser's event handling system. 
// They are recognized by the JavaScript engine as specific types of events.

// When you use 'click' in addEventListener, it isn't just any arbitrary string. Instead, 
// it's a keyword that the browser's event system understands to mean "listen for a click event."

// In this war inside string , 'click' is a predefined string that tells the browser to look for 
// and handle click events on the specified element. 
// These predefined strings are part of the event types that are built into the browser's DOM API


// How the Browser Interprets Event Strings
// The browser has a list of recognized event types. When you pass 'click' to addEventListener, 
// the browser checks this list, understands that you're referring to a click event, 
// and sets up the necessary logic to detect and handle this event.

// In summary, while both are technically strings, general strings are just sequences of characters, 
// while event strings like 'click' have special meaning within the context of the DOM and are recognized by the browser's event system.


// few dom examples

DOM Manipulation Tactics
Here are a few common tactics for manipulating the DOM:
Accessing Elements: Use methods like getElementById(), querySelector(), and querySelectorAll() to access elements in the DOM.

Modifying Content: Change the content of elements using properties like textContent and innerHTML.

Creating and Adding Elements: Use methods like createElement() and appendChild() to create new elements and add them to the DOM.

Removing Elements: Use methods like removeChild() to remove elements from the DOM.

Changing Styles: Modify the styles of elements using the style property.

Event Handling: Add event listeners to elements to handle user interactions using addEventListener().

Batch Updates: Use DocumentFragment to batch multiple DOM updates and minimize reflows and repaints.



// qustion get random number accoding to length
// with two logic using while and for loop

// first answer using while loop

// let password = ""

// function random(size){
// while (password.length < size ) {
//        let number = Math.round(Math.random()*10)
//        password += number
//    }
// }
// random(12)
// console.log(password);


// second answer using for loop

// let password2 = ''

// function random2(size){
//     for(let i = 0; i < size; i ++){
//      let number = Math.floor(Math.random()*10)
//      password2 += number
     
//     }
// }
// random2(12)
// console.log(password2);


// answer third using random via maths to index from string length using while loop

// let source = "abcdefghijklmnopqrstuvwxyz"
// let numbers = 123456789
// let password = ''

// function prosses (){           
//         while(password.length <= 9){
//         let random = Math.floor(Math.random() * 10)
//         password += source.charAt(random)
//         password += numbers.toString().charAt(random)  
//         }
//     }

// prosses()
// console.log(password);
